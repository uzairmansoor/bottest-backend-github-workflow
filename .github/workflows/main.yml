name: Deployment on AWS

on:
  push:
    branches:
      - dev
      - production

jobs:
  get-environment:
    name: Get environment
    outputs:
      my_env: ${{ steps.setenv.outputs.my_env }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitHub code
        id: checkout-id
        uses: actions/checkout@v4
      - id: setenv
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "my_env=dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
            echo "my_env=production" >> $GITHUB_OUTPUT
          fi

  build-deploy:
    if: contains(github.event.head_commit.message, 'deploy workflows')
    needs: get-environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout GitHub code
        uses: actions/checkout@v4

      - name: Set environment variables based on branch
        run: |
          if [ "${{ needs.get-environment.outputs.my_env }}" == "dev" ]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_DEV }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}" >> $GITHUB_ENV
            echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID_DEV }}" >> $GITHUB_ENV
            echo "AWS_REGION=${{ vars.AWS_REGION_DEV }}" >> $GITHUB_ENV
            echo "IMAGE_REPO_NAME=${{ vars.IMAGE_REPO_NAME_DEV }}" >> $GITHUB_ENV
            echo "IMAGE_TAG=${{ vars.IMAGE_TAG_DEV }}" >> $GITHUB_ENV
            echo "LAMBDA_FUNCTION_NAME=${{ vars.LAMBDA_FUNCTION_NAME_DEV }}" >> $GITHUB_ENV
          elif [ "${{ needs.get-environment.outputs.my_env }}" == "production" ]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}" >> $GITHUB_ENV
            echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID_PRODUCTION }}" >> $GITHUB_ENV
            echo "AWS_REGION=${{ vars.AWS_REGION_PRODUCTION }}" >> $GITHUB_ENV
            echo "IMAGE_REPO_NAME=${{ vars.IMAGE_REPO_NAME_PRODUCTION }}" >> $GITHUB_ENV
            echo "IMAGE_TAG=${{ vars.IMAGE_TAG_PRODUCTION }}" >> $GITHUB_ENV
            echo "LAMBDA_FUNCTION_NAME=${{ vars.LAMBDA_FUNCTION_NAME_PRODUCTION }}" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get branch name
        id: branch
        shell: bash
        run: echo "name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      - name: Echo branch name
        run: |
            echo ${{ steps.branch.outputs.name }}
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Pushing image
        id: build-image-audit-rules
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY:  ${{ env.IMAGE_REPO_NAME }}
            IMAGE_TAG:  ${{ env.IMAGE_TAG }}
            LAMBDA_FUNCTION_NAME:  ${{ env.LAMBDA_FUNCTION_NAME }}
        run: |
          echo Build started on `date`
          echo Building the Docker image...
          ls          
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker images 
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG  $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          echo Build completed on `date`
          echo Pushing the Docker image...
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --image-uri $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
